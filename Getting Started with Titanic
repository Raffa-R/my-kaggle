{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/raffareyhan/getting-started-with-titanic?scriptVersionId=230290288\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-29T03:53:22.200691Z","iopub.execute_input":"2025-03-29T03:53:22.201002Z","iopub.status.idle":"2025-03-29T03:53:23.360808Z","shell.execute_reply.started":"2025-03-29T03:53:22.200964Z","shell.execute_reply":"2025-03-29T03:53:23.359688Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntrain_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-29T03:55:05.337187Z","iopub.execute_input":"2025-03-29T03:55:05.337539Z","iopub.status.idle":"2025-03-29T03:55:05.385376Z","shell.execute_reply.started":"2025-03-29T03:55:05.337512Z","shell.execute_reply":"2025-03-29T03:55:05.384436Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntest_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-29T03:55:42.478424Z","iopub.execute_input":"2025-03-29T03:55:42.47885Z","iopub.status.idle":"2025-03-29T03:55:42.502897Z","shell.execute_reply.started":"2025-03-29T03:55:42.478815Z","shell.execute_reply":"2025-03-29T03:55:42.501836Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)/len(women)\n\nprint(\"% of women who survived:\", rate_women)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-29T03:56:25.338512Z","iopub.execute_input":"2025-03-29T03:56:25.338974Z","iopub.status.idle":"2025-03-29T03:56:25.351902Z","shell.execute_reply.started":"2025-03-29T03:56:25.338918Z","shell.execute_reply":"2025-03-29T03:56:25.350693Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)/len(men)\n\nprint(\"% of men who survived:\", rate_men)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-29T04:00:55.732659Z","iopub.execute_input":"2025-03-29T04:00:55.733042Z","iopub.status.idle":"2025-03-29T04:00:55.740594Z","shell.execute_reply.started":"2025-03-29T04:00:55.733009Z","shell.execute_reply":"2025-03-29T04:00:55.739635Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-29T04:02:39.048628Z","iopub.execute_input":"2025-03-29T04:02:39.048979Z","iopub.status.idle":"2025-03-29T04:02:40.408424Z","shell.execute_reply.started":"2025-03-29T04:02:39.048927Z","shell.execute_reply":"2025-03-29T04:02:40.40733Z"}},"outputs":[],"execution_count":null}]}